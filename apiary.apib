FORMAT: 1A
HOST: https://api.frost-sns.ml/

# Frost-API (日本語)

- Frost-APIは公式アプリケーションを含むすべてのFrostクライアントがFrostのコンテンツを利用するためのAPIです。

- 権限を必要とするエンドポイントへのリクエストではヘッダーに `X-Application-Key` と `X-Access-Key` が付加されている必要があり、また、そのアプリケーションは指定された権限を持っている必要があります。

# Group Account - 自身のアカウント
## account [/account]

### アカウントを作成 [POST]

#### アクセスに必要な権限
- `accountSpecial`

+ Request (application/json)

        {
            "screenName": "hoge",
            "password": "hogehoge",
            "name": "ほげほげ",
            "description": "ぴよぴよ"
        }

+ Response 200
    [users/id][]

# Group Applications - 連携アプリケーション

## applications [/applications]

+ Model (application/json)

        {
            "application": {
                "createdAt": 1490034577,
                "creatorId": "58d01f91eaac651378b79b72",
                "description": "テスト用のアプリケーションです。",
                "id": "58d01f91eaac651378b79b73",
                "name": "Frost Test",
                "permissions": [
                    "accountRead",
                    "userRead",
                    "postRead",
                    "postWrite"
                ]
            }
        }

### アプリケーションの作成 [POST]

#### アクセスに必要な権限
- `applicationSpecial`

+ Request (application/json)

        {
            "name": "Test",
            "description": "テスト用のアプリケーションです。",
            "permissions": [
                "accountRead",
                "userRead",
                "postRead",
                "postWrite"
            ]
        }

+ Response 200
    [applications][]

## applications/id [/applications/{id}]

+ Parameters
    + id: `58d01f91eaac651378b79b73` (string, required) - アプリケーションID。

### アプリケーション情報を取得 [GET]

#### アクセスに必要な権限
- `application`

+ Response 200
    [applications][]

## applications/id/application_key [/applications/{id}/application_key]

+ Parameters
    + id: `58d01f91eaac651378b79b73` (string, required) - アプリケーションID。

+ Model (application/json)

        {
            "applicationKey": "58d01f91eaac651378b79b73-aa9870bd22dbfbed956419994824b8498556e8f568bca86fcbd8bc41eb04151a.67654"
        }

### アプリケーションキーの作成 [POST]

#### アクセスに必要な権限
- `applicationSpecial`

+ Response 200
    [applications/id/application_key][]

### アプリケーションキーの取得 [GET]

#### アクセスに必要な権限
- `applicationSpecial`

+ Response 200
    [applications/id/application_key][]

# Group IceAuth - アプリケーションの認証

## ice_auth [/ice_auth]

### IceAuthキーの作成 [POST]
#### 説明
認証を行う際に必要となります。
#### アクセスに必要な権限
- 不要

+ Request (application/json)

        {
            "applicationKey": "abcdef123456abcdef123456-ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234.123"
        }

+ Response 200 (application/json)

        {
            "iceAuthKey" : "abcdef123456abcdef123456-ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234.123"
        }

## ice_auth/authorize [/ice_auth/authorize]

### 認証を行いアクセスキーを作成 [POST]
#### アクセスに必要な権限
- 不要

+ Request (application/json)

    + Headers

            X-Ice-Auth-Key: abcdef123456abcdef123456-ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234.123

    + Body

            {
                "verificationCode" : "1234567890"
            }

+ Response 200

        {
            "accessKey": "58d01f91eaac651378b79b73-aa9870bd22dbfbed956419994824b8498556e8f568bca86fcbd8bc41eb04151a.67654"
        }

## ice_auth/verification_code [/ice_auth/verification_code]

### 検証コードを取得 [GET]
#### 説明
認証ホスト(Frost-Webなど)向けです。

クライアントは`ice_auth_host`権限を持つ認証ホスト上で手続きを行い、間接的に`verificationKey`を得る必要があります。
#### アクセスに必要な権限
- `iceAuthHost`

+ Request (application/json)

    + Headers

            X-Ice-Auth-Key: abcdef123456abcdef123456-ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234.123

+ Response 200 (application/json)

        {
            "verificationCode" : "1234567890"
        }

## ice_auth/target_user [/ice_auth/target_user]

### 認証の対象ユーザーを設定 [POST]
#### 説明
認証ホスト(Frost-Webなど)向けです。

`iceAuthHost`権限を持つ認証ホストが手続きを行う際に、認証の対象となったユーザーの`userId`をパラメータに付加してリクエストします。
#### アクセスに必要な権限
- `iceAuthHost`

+ Request (application/json)

    + Headers

            X-Ice-Auth-Key: abcdef123456abcdef123456-ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234.123

    + Body

            {
                "userId": "abcdef123456abcdef123457"
            }

+ Response 200 (application/json)

        {
            "targetUserId" : "abcdef123456abcdef123457"
        }

## ice_auth/authorize_basic [/ice_auth/authorize_basic]

### screenNameとpasswordを検証して、アクセスキーを作成 [POST]
認証ホスト(Frost-Webなど)向けです。
#### アクセスに必要な権限
- `iceAuthHost`

+ Request (application/json)

    + Headers

            X-Ice-Auth-Key: abcdef123456abcdef123456-ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234.123

    + Body

            {
                "screenName" : "hogehoge",
                "password": "piyopiyo"
            }

+ Response 200

        {
            "accessKey": "58d01f91eaac651378b79b73-aa9870bd22dbfbed956419994824b8498556e8f568bca86fcbd8bc41eb04151a.67654"
        }

# Group Posts - 投稿記事

## posts/id [/posts/{id}]

+ Parameters
    + id: `abcdef123456abcdef123456` (string, required) - ポストID。

### ポストを取得 [GET]

#### アクセスに必要な権限
- `postRead`

+ Response 200
    [posts/post_status][]

+ Response 200
    [posts/post_article][]

+ Response 200
    [posts/post_link][]

## posts/post_status [/posts/post_status]

+ Model (application/json)

        {
            "postStatus": {
                "id": "abcdef123456abcdef123456",
                "createdAt": 1234567891,
                "userId": "1",
                "text": "hogehoge"
            }
        }

### ステータスポストを作成 [POST]

#### アクセスに必要な権限
- `postWrite`

+ Request (application/json)

        {
            "text": "hogehoge"
        }

+ Response 200
    [posts/post_status][]

## posts/post_article [/posts/post_article]

+ Model (application/json)

        {
            "postArticle": {
                "id": "abcdef123456abcdef123457",
                "createdAt": 1234567892,
                "userId": "1",
                "title": "hoge",
                "description": "description text",
                "body": "hogehoge",
                "thumbnailUrl": "http://hogehoge.jp/thumbnail.png"
            }
        }

### アーティクルポストを作成 [POST]

#### アクセスに必要な権限
- `postWrite`

+ Request (application/json)

        {
            "title": "hoge",
            "description": "description text",
            "body": "hogehoge",
            "thumbnailUrl": "http://hogehoge.jp/thumbnail.png"
        }

+ Response 200
    [posts/post_article][]

## posts/post_link [/posts/post_link]

+ Model (application/json)

        {
            "postLink": {
                "id": "abcdef123456abcdef123458",
                "createdAt": 1234567893,
                "userId": "2",
                "targetPostId": "abcdef123456abcdef123458",
                "targetPost": {
                    "postArticle": {
                        "id": "abcdef123456abcdef123457",
                        "createdAt": 1234567892,
                        "userId": "1",
                        "title": "hoge",
                        "description": "description text",
                        "body": "hogehoge",
                        "thumbnailUrl": "http://hogehoge.jp/thumbnail.png"
                    }
                }
            }
        }

### リンクポストを作成 [POST]

#### アクセスに必要な権限
- `postWrite`

+ Request (application/json)

        {
            "targetPostId": "abcdef123456abcdef123458"
        }

+ Response 200
    [posts/post_link][]

# Group Users - ユーザー

## users/id [/users/{id}]

+ Parameters
    + id: `abcdef123456abcdef123456` (string, required) - ユーザーID。

+ Model (application/json)

        {
            "user": {
                "id": "abcdef123456abcdef123456",
                "createdAt": 1234567890,
                "screenName": "hoge",
                "name": "ほげほげ",
                "description": "ぴよぴよ"
            }
        }

### ユーザー情報の取得 [GET]

#### アクセスに必要な権限
- `userRead`

+ Response 200
    [users/id][]

## users/id/timeline [/users/{id}/timeline]

+ Model (application/json)

        [
            {
                "postStatus": {
                    "id": "abcdef123456abcdef123456",
                    "createdAt": 1234567891,
                    "userId": "1",
                    "text": "hogehoge"
                }
            },
            {
                "postArticle": {
                    "id": "abcdef123456abcdef123457",
                    "createdAt": 1234567892,
                    "userId": "1",
                    "title": "hoge",
                    "description": "description text",
                    "body": "hogehoge",
                    "thumbnailUrl": "http://hogehoge.jp/thumbnail.png"
                }
            },
            {
                "postLink": {
                    "id": "abcdef123456abcdef123458",
                    "createdAt": 1234567893,
                    "userId": "2",
                    "targetPostId": "abcdef123456abcdef123458",
                    "targetPost": {
                        "postArticle": {
                            "id": "abcdef123456abcdef123457",
                            "createdAt": 1234567892,
                            "userId": "1",
                            "title": "hoge",
                            "description": "description text",
                            "body": "hogehoge",
                            "thumbnailUrl": "http://hogehoge.jp/thumbnail.png"
                        }
                    }
                }
            }
        ]

### 指定ユーザーの最新の投稿一覧を取得 [GET]

#### アクセスに必要な権限
- `userRead`, `postRead`

+ Request (application/json)

        {
            "filter": "all",
            "limit": 3
        }

+ Response 200
    [users/id/timeline][]

## users/id/followings [/users/{id}/followings]

### 指定ユーザーのフォローの一覧を取得 [GET]

#### アクセスに必要な権限
- `userRead`

+ Response 200

## users/id/followers [/users/{id}/followers]

### 指定ユーザーのフォロワーの一覧を取得 [GET]

#### アクセスに必要な権限
- `userRead`

+ Response 200

## users/id/follow [/users/{id}/follow]

### 指定ユーザーをフォローする [POST]

#### アクセスに必要な権限
- `userWrite`

+ Response 200

### 指定ユーザーへのフォローを解除する [DELETE]

#### アクセスに必要な権限
- `userWrite`

+ Response 200